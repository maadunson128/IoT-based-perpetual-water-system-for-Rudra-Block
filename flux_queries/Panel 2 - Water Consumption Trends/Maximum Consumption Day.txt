// Step 1: Compute daily total consumption for Tank 1
tank1_daily = from(bucket: "tank_data")
  |> range(start: -30d)
  |> filter(fn: (r) => r["_measurement"] == "tank_monitoring" and r["_field"] == "tank1_volume_liters")
  |> aggregateWindow(every: 3m, fn: last)
  |> difference()
  |> filter(fn: (r) => r._value < 0)  // Filter for negative differences (consumption)
  |> map(fn: (r) => ({ r with _value: -1.0 * r._value }))  // Convert to positive values
  |> aggregateWindow(every: 1d, fn: sum)

// Step 2: Compute daily total consumption for Tank 2
tank2_daily = from(bucket: "tank_data")
  |> range(start: -30d)
  |> filter(fn: (r) => r["_measurement"] == "tank_monitoring" and r["_field"] == "tank2_volume_liters")
  |> aggregateWindow(every: 3m, fn: last)
  |> difference()
  |> filter(fn: (r) => r._value < 0)  // Filter for negative differences (consumption)
  |> map(fn: (r) => ({ r with _value: -1.0 * r._value }))  // Convert to positive values
  |> aggregateWindow(every: 1d, fn: sum)

// Step 3: Combine the daily consumption of both tanks
total_daily = union(tables: [tank1_daily, tank2_daily])
  |> group(columns: ["_time"])
  |> sum(column: "_value")


// Step 4: Find single maximum daily consumption over past 30 days
max_daily = total_daily
  |> group()  // Group without columns to aggregate all data points
  |> max(column: "_value")
  |> set(key: "_measurement", value: "consumption_metrics")
  |> set(key: "_field", value: "maximum_daily_consumption")
  |> keep(columns: ["_value", "_measurement", "_field", "_time"])
  |> yield(name: "Max_Daily_Consumption")
